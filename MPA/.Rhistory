# Calculate the time varying trophic level
library(FishLife)
library(rfishbase)
df <- FishLife::FishBase
# Add the TL data to Y_ij
## Loop through fishbase to get TL ##
fish_spp <- df$Z_ik
nspp <- dim(fish_spp)[1]
TL <- rep(NA, nspp)
i <- 1
for(i in 1:nspp){
name <- paste(fish_spp$Genus[i],fish_spp$Species[i])
# Calculate the time varying trophic level
library(FishLife)
library(rfishbase)
df <- FishLife::FishBase
# Add the TL data to Y_ij
## Loop through fishbase to get TL ##
fish_spp <- df$Z_ik
nspp <- dim(fish_spp)[1]
TL <- rep(NA, nspp)
i <- 1
name <- paste(fish_spp$Genus[i],fish_spp$Species[i])
ecotmp <- rfishbase::ecology(name, fields = c('FoodTroph','DietTroph'))
ecotmp
str(ecotmp)
as.numeric(ecotmp)
mean(as.numeric(ecotmp), na.rm = TRUE)
i
all(is.na(ecotmp)) == 1)
(all(is.na(ecotmp)) == 1)
(all(is.na(as.numeric(ecotmp))) == 1)
is.na(as.numeric(ecotmp))) == 1
is.na(as.numeric(ecotmp)) == 1)
(is.na(as.numeric(ecotmp)) == 1)
(all(is.na(as.numeric(ecotmp)) == 1))
(all(is.na(as.numeric(ecotmp)) == 0))
is.na(as.numeric(ecotmp)))
is.na(as.numeric(ecotmp))
all(is.na(as.numeric(ecotmp)))
(all(is.na(as.numeric(ecotmp))) ==0)
# Calculate the time varying trophic level
library(FishLife)
library(rfishbase)
# Add the TL data to Y_ij
## Loop through fishbase to get TL ##
df <- FishLife::FishBase
fish_spp <- df$Z_ik
rm(df) # Free up some space?
nspp <- dim(fish_spp)[1]
TL <- rep(NA, nspp)
i <- 1
for(i in 1:nspp){
name <- paste(fish_spp$Genus[i],fish_spp$Species[i])
ecotmp <- rfishbase::ecology(name, fields = c('FoodTroph','DietTroph'))
if(all(is.na(as.numeric(ecotmp))) ==0){
TL[i]<- mean(as.numeric(ecotmp), na.rm = TRUE)
}
print(i) # This takes a while
}
TL
# Calculate the time varying trophic level
library(FishLife)
library(rfishbase)
# Add the TL data to Y_ij
## Loop through fishbase to get TL ##
df <- FishLife::FishBase
fish_spp <- df$Z_ik
rm(df) # Free up some space?
nspp <- dim(fish_spp)[1]
TL <- rep(NA, nspp)
i <- 1
for(i in 1:nspp){
name <- paste(fish_spp$Genus[i],fish_spp$Species[i])
ecotmp <- rfishbase::ecology(name, fields = c('FoodTroph','DietTroph'))
if(all(is.na(as.numeric(ecotmp))) ==0){
TL[i]<- mean(as.numeric(ecotmp), na.rm = TRUE)
}
print(i) # This takes a while
}
i
ecotmp
as.numeric(ecotmp)
str(ecotmp)
as.numeric(ecotmp)
if(all(is.na(as.numeric(unlist(ecotmp)))) ==0){
TL[i]<- mean(as.numeric(ecotmp), na.rm = TRUE)
}
unlist(ecotmp)
as.numeric(unlist(ecotmp))
all(is.na(as.numeric(unlist(ecotmp))))
(all(is.na(as.numeric(unlist(ecotmp)))) ==0)
i
TL
i
for(i in 69:nspp){
name <- paste(fish_spp$Genus[i],fish_spp$Species[i])
ecotmp <- rfishbase::ecology(name, fields = c('FoodTroph','DietTroph'))
if(all(is.na(as.numeric(unlist(ecotmp)))) ==0){
TL[i]<- mean(as.numeric(ecotmp), na.rm = TRUE)
}
print(i) # This takes a while
}
name <- paste(fish_spp$Genus[i],fish_spp$Species[i])
ecotmp <- rfishbase::ecology(name, fields = c('FoodTroph','DietTroph'))
unlist(ecotmp)
for(i in 69:nspp){
name <- paste(fish_spp$Genus[i],fish_spp$Species[i])
ecotmp <- rfishbase::ecology(name, fields = c('FoodTroph','DietTroph'))
if(all(is.na(as.numeric(unlist(ecotmp)))) ==0){
TL[i]<- mean(as.numeric(unlist(ecotmp)), na.rm = TRUE)
}
print(i) # This takes a while
}
library(ggplot2)
library(scales)
library(officer)
cols <- PNWColors::pnw_palette('Starfish', n = 2)
data <- data.frame(y = rep(c(800,1200), each = 1000)*exp(c(rnorm(1000, mean = 0, sd = 0.3),rnorm(1000, mean = 0, sd = 0.5))),
run = 1:1000, model = rep(c('model 1','model 2'), each = 1000))
p1 <- ggplot(data, aes(y = y, x = model,fill = model))+geom_jitter(color = alpha('black', alpha = 0.15), width = 0.2)+geom_violin(color = NA)+
scale_fill_manual(values = alpha(cols, alpha = 0.5))+
scale_y_continuous('value', limits = c(0,4000))+theme_classic()+
geom_boxplot(width=0.2, col = 'black', outlier.shape = NA)+theme(legend.position = 'none')
doc <- read_pptx()
doc <- add_slide(doc, 'Title and Content', 'Office Theme')
# Add the plot
doc <- rvg::ph_with_vg(doc, ggobj = p1, type = 'body')
# Write the document to a file
print(doc, target = 'violinplot.pptx')
devtools::install_github("thomasp85/patchwork")
250000/7
7*5
4166/12
14.642*0.4
14642*0.4
14642-14642*0.4*.37
14642-14642*0.4*.37-5000
7*50
# Plot the climate MSE climate results
library(TMB)
library(r4ss)
library(devtools)
install.packages('devtools')
library(devtools)
install.packages('ps')
library(devtools)
library(devtools)
install.packages('ps')
library(devtools)
install.packages('devtools')
install.packages('devtools', dependencies = TRUE)
install.packages('devtools', dependencies = TRUE)
library(devtools)
install.packages('backports')
library(devtools)
library(PacifichakeMSE)
install_git('https://github.com/nissandjac/PacifichakeMSE/')
#### Plot the MSE results ####
library(dplyr)
library(ggplot2)
library(reshape2)
10*120*4
492/4186
492/41865
745/45757
994/77523
850/58000
4850/72000
75/15
15/75
5/
500/5
source('~/GitHub/PacifichakeMSE/R/load_data_seasons.R')
sqrt(36)
350000000/200000
350000000/200000*20
6/8
+/
19+9
28/229
28+24
355*2*12
install.packages('mizer')
??mizer
4162.85*3+3876.17
31+29+31
2,295.00*4
2295.00*4
2295.00*4+11500*9/6.16
131525/7
131525/6.16
5500/2
5611.50*3+5298.60
(5611.50*3+5298.60/)6.1
(5611.50*3+5298.60)/6.1
(5611.50*3+5298.60
5611.50*3+5298.60
38230.94*12
41604/6.1
511000/6.1
# Let's make a size-based model of a specific ecosystem. Get ecosystem data from the RAM database
library(rPref)
library(scales)
source('load_files.R')
# Use north east continental shelf (LME number = 7)
LMEnumber <- 23
state <- Biomass_from_RAMv3(LMEnumber,getwd())
units <- state[[2]]
state <- state[[1]]
RAMnames <- state$fnames
# Sum all the same species
cnames <- as.character(unique(state$cnames))
fnames <- as.character(unique(state$fnames))
state_new <- as.data.frame(matrix(NA, length(cnames), length(names(state))))
names(state_new) <- names(state)
state_new <- state_new[,1:10] # Remove the "fish or not"-flag
state_new$cnames <- cnames
RAMname <- matrix(NA,length(cnames))
for (i in 1:length(cnames)){
tmpidx <- which(cnames[i] == state$cnames)
state_new$F0[i] <- mean(state$F0[tmpidx], na.rm = T)
state_new$Catch[i] <- sum(state$Catch[tmpidx], na.rm = T)
state_new$Landings[i] <- sum(state$Landings[tmpidx], na.rm = T)
state_new$Biomass[i] <- sum(state$Biomass[tmpidx], na.rm = T)
state_new$SSB[i] <- sum(state$SSB[tmpidx], na.rm = T)
state_new$M[i] <-  mean(state$M[tmpidx], na.rm = T)
state_new$Fmsy[i] <-  mean(state$Fmsy[tmpidx], na.rm = T)
state_new$k[i] <-   mean(state$k[tmpidx], na.rm = T)
state_new$t0[i] <- mean(state$t0[tmpidx], na.rm = T)
state_new$wInf[i] <- mean(state$wInf[tmpidx], na.rm = T)
}
# Fix values that are 0 or NaN to NA
is.nan.data.frame <- function(x){
do.call(cbind, lapply(x, is.nan))}
state_new[is.nan.data.frame(state_new)] <- NA
state_new$Biomass[state_new$Biomass == 0] = NA
state_new$SSB[state_new$SSB == 0] = NA
state <- state_new
# Sort the dataframe
state <- state[with(state, order(wInf)), ]
totBioidx <- which(is.na(state$Biomass) == 1)
state$SSBio <- state$SSB
state$totFlag <- as.numeric(is.na(state$SSBio))
state$SSBio[totBioidx] <- state$Biomass[totBioidx]
rmidx <- which(is.na(state$SSBio) == 0)
state$F0[which(is.na(state$F0) == 1)] <- state$Catch[which(is.na(state$F0) == 1)]/
state$SSBio[which(is.na(state$F0) == 1)]
state$wInf[3]<- 15000
source('baseparameters.R')
source('IterateSpectrum.R')
rm(param)
h <- 20
kappaPP <- 5e5
param <- baseparameters(state$wInf, kappa = 5e5, h = h) # Kappa estimated from LME
param$tEnd <- 80
S <- NA
param$F0 <- state$F0
param$fishing <- "Trawl"
ptm <- proc.time()
S <- IterateSpectrum(param,S)
proc.time()-ptm
plotSpectrum(param,S)
plotBiomasstime(param,S)
plotBiomass(param,S)
compareBiomass(param,S,state)
# Plot the results
# Make sure the Rp/Rmax isn't too high
# Calculate species specific values of maximum uptake (h)
h <- 3*state$k/(param$alpha*state$wInf^(-1/3))
h[is.na(h)] <- mean(h,na.rm=T)
cV <- 1/mean(h,na.rm=T)
# hNew
kappaNew <- 694348
5333/6.1
5333*6.1
23700*12
284400+11000*4
24/1200
install.packages('VAST')
install.packages("remotes")
remotes::install_github("James-Thorson/VAST")
install_github("nwfsc-assess/geostatistical_delta-GLMM")
library(devtools)
install_github("nwfsc-assess/geostatistical_delta-GLMM")
install_github("nwfsc-assess/geostatistical_delta-GLMM", force = true)
install_github("nwfsc-assess/geostatistical_delta-GLMM", force = TRUE)
28700*12+(11500*4)/2
remotes::install_github("tokami/mse)
remotes::install_github("tokami/mse)
remotes::install_github("tokami/mse")
0^1.6
library(reshape2)
library(gtools)
library(patchwork)
library(tidyverse)
library(TMB)
source('R/calcSSB0.R')
source('R/run_agebased_model_true_Catch.R')
source('R/load_data_seasons.R')
# Load the data frame with eggs
eggs <- read.csv('data/fecundityEggSizeFemaleSize.csv')
eggs$weight <- 0.01*(eggs$FemaleSize_mm/10)^3 # Fix this later
# All eggs as a function of size
ggplot(eggs, aes(x = weight, y = exp(lnFecundity), color = Species))+
geom_point()+theme_bw()+theme(legend.position = 'none')+
geom_smooth(method = 'lm')+
scale_x_log10()+
scale_y_log10()
#
unique(eggs$Species)
setwd("~/GitHub/FisheriesBiology2022/MPA")
### run the megadata file ###
library(tidyverse)
library(raster)
library(sf)
megadata <- readRDS('MegaData.rds')
Cleanmegacell<-readRDS(file = "Cleanmegacell_mollweide.rds")
CleanCoordmegacell<-readRDS(file = "CleanCoordmegacell_mollweide.rds")
KprotectedPerCell_Library<-readRDS(file = "KprotectedPerCell_Library_mollweide.rds")
MPA_coord<-readRDS(file="MPA_coord_mollweide.rds")
land_shp_moll<-readRDS(file = "land_shp_moll.rds")
# This is a dataframe of fish stock assessment output from the North Sea (grabbed somewhere from ICES)
df <- read.csv('TEST.csv')
idx <- names(megadata) %in% c('SpeciesID', 'stockid', 'SciName',
'K', 'B', 'MSYfin', 'Kfin', 'Hopt','Efin', 'E', 'r', 'm', 'Emsy')
megadata <- megadata[,idx] # Clean up the rows
# Test e.g, cod
cod <- megadata[megadata$SciName == 'Gadus morhua',]
head(cod)
library(ramlegacy)
??ramlegacy
# Test e.g, cod
cod <- megadata[megadata$stockid == 'CODNS',] # North Sea cod
head(cod)
head(megadata)
head)cod
head(cod)
cod <- megadata[megadata$SciName == 'Gadus morhua',]
head(cod)
cod$Hopt/cod$Kfin
plot(cod$Hopt/cod$Kfin)
plot(cod$Hopt/cod$Kfin, type = 'l')
plot(cod$Kfin/cod$K, type = 'l')
plot(cod$Kfin/cod$K/nrow(cod), type = 'l')
plot(cod$Kfin/cod$K*nrow(cod), type = 'l')
mean(cod$Kfin/cod$K*nrow(cod), type = 'l')
median(cod$Kfin/cod$K*nrow(cod), type = 'l')
sum(cod$Kfin)
